import React, { useState } from 'react';
import { Send, Download, Video, BookOpen, MessageCircle, Loader2, AlertCircle, CheckCircle } from 'lucide-react';

const API_BASE_URL = 'http://localhost:5000/api';

export default function TranscriptoLearn() {
  const [videoUrl, setVideoUrl] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [processedData, setProcessedData] = useState(null);
  const [activeTab, setActiveTab] = useState('notes');
  const [question, setQuestion] = useState('');
  const [chatHistory, setChatHistory] = useState([]);
  const [isAsking, setIsAsking] = useState(false);
  const [error, setError] = useState('');

  const processVideo = async () => {
    if (!videoUrl.trim()) {
      setError('Please enter a valid YouTube URL');
      return;
    }

    setIsProcessing(true);
    setError('');
    
    try {
      const response = await fetch(`${API_BASE_URL}/process-video`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ url: videoUrl }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Failed to process video');
      }

      setProcessedData(data);
      setChatHistory([]);
    } catch (err) {
      setError(err.message);
    } finally {
      setIsProcessing(false);
    }
  };

  const askQuestion = async () => {
    if (!question.trim() || !processedData) return;

    setIsAsking(true);
    const userQuestion = question;
    setQuestion('');

    // Add user question to chat
    setChatHistory(prev => [...prev, { type: 'user', content: userQuestion }]);

    try {
      const response = await fetch(`${API_BASE_URL}/ask-question`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          video_id: processedData.video_id,
          question: userQuestion,
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Failed to get answer');
      }

      // Add AI response to chat
      setChatHistory(prev => [...prev, { type: 'ai', content: data.answer }]);
    } catch (err) {
      setChatHistory(prev => [...prev, { type: 'ai', content: `Error: ${err.message}` }]);
    } finally {
      setIsAsking(false);
    }
  };

  const exportNotes = () => {
    if (!processedData) return;

    const notesText = `
# ${processedData.video_info.title}

## Summary
${processedData.summary}

## Detailed Notes
${processedData.notes}

## Video Information
- Uploader: ${processedData.video_info.uploader}
- Duration: ${Math.floor(processedData.video_info.duration / 60)} minutes

Generated by TranscriptoLearn
    `;

    const blob = new Blob([notesText], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${processedData.video_info.title.replace(/[^a-z0-9]/gi, '_')}_notes.md`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const formatText = (text) => {
    return text.split('\n').map((line, index) => {
      if (line.startsWith('**') && line.endsWith('**')) {
        return <h3 key={index} className="font-bold text-lg mt-4 mb-2 text-blue-600">{line.slice(2, -2)}</h3>;
      }
      if (line.startsWith('# ')) {
        return <h2 key={index} className="font-bold text-xl mt-4 mb-2 text-gray-800">{line.slice(2)}</h2>;
      }
      if (line.startsWith('## ')) {
        return <h3 key={index} className="font-bold text-lg mt-3 mb-2 text-gray-700">{line.slice(3)}</h3>;
      }
      if (line.trim() === '') {
        return <br key={index} />;
      }
      return <p key={index} className="mb-2 leading-relaxed">{line}</p>;
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <header className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-2">TranscriptoLearn</h1>
          <p className="text-gray-600 text-lg">AI-powered lecture video transcription and learning assistant</p>
        </header>

        {/* URL Input Section */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="flex-1">
              <input
                type="url"
                value={videoUrl}
                onChange={(e) => setVideoUrl(e.target.value)}
                placeholder="Paste YouTube lecture video URL here..."
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                disabled={isProcessing}
              />
            </div>
            <button
              onClick={processVideo}
              disabled={isProcessing}
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2 transition-colors"
            >
              {isProcessing ? (
                <>
                  <Loader2 className="w-5 h-5 animate-spin" />
                  Processing...
                </>
              ) : (
                <>
                  <Video className="w-5 h-5" />
                  Process Video
                </>
              )}
            </button>
          </div>
          
          {error && (
            <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-lg flex items-center gap-2 text-red-700">
              <AlertCircle className="w-5 h-5" />
              {error}
            </div>
          )}
        </div>

        {/* Results Section */}
        {processedData && (
          <div className="bg-white rounded-xl shadow-lg overflow-hidden">
            {/* Video Info Header */}
            <div className="bg-gray-50 p-6 border-b">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-xl font-semibold text-gray-800 mb-1">
                    {processedData.video_info.title}
                  </h2>
                  <p className="text-gray-600">
                    by {processedData.video_info.uploader} â€¢ {Math.floor(processedData.video_info.duration / 60)} minutes
                  </p>
                </div>
                <div className="flex items-center gap-2 text-green-600">
                  <CheckCircle className="w-5 h-5" />
                  <span className="font-medium">Processed</span>
                </div>
              </div>
            </div>

            {/* Tabs */}
            <div className="border-b">
              <nav className="flex">
                {[
                  { id: 'notes', label: 'Smart Notes', icon: BookOpen },
                  { id: 'summary', label: 'Summary', icon: Video },
                  { id: 'chat', label: 'Q&A Chat', icon: MessageCircle }
                ].map(({ id, label, icon: Icon }) => (
                  <button
                    key={id}
                    onClick={() => setActiveTab(id)}
                    className={`flex items-center gap-2 px-6 py-4 font-medium transition-colors ${
                      activeTab === id
                        ? 'border-b-2 border-blue-500 text-blue-600 bg-blue-50'
                        : 'text-gray-600 hover:text-gray-800 hover:bg-gray-50'
                    }`}
                  >
                    <Icon className="w-5 h-5" />
                    {label}
                  </button>
                ))}
              </nav>
            </div>

            {/* Tab Content */}
            <div className="p-6">
              {activeTab === 'notes' && (
                <div>
                  <div className="flex justify-between items-center mb-6">
                    <h3 className="text-lg font-semibold text-gray-800">AI-Generated Notes</h3>
                    <button
                      onClick={exportNotes}
                      className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                    >
                      <Download className="w-4 h-4" />
                      Export Notes
                    </button>
                  </div>
                  <div className="prose max-w-none">
                    {formatText(processedData.notes)}
                  </div>
                </div>
              )}

              {activeTab === 'summary' && (
                <div>
                  <h3 className="text-lg font-semibold text-gray-800 mb-4">Video Summary</h3>
                  <div className="prose max-w-none">
                    {formatText(processedData.summary)}
                  </div>
                </div>
              )}

              {activeTab === 'chat' && (
                <div>
                  <h3 className="text-lg font-semibold text-gray-800 mb-4">Ask Questions About This Video</h3>
                  
                  {/* Chat History */}
                  <div className="mb-6 space-y-4 max-h-96 overflow-y-auto">
                    {chatHistory.length === 0 ? (
                      <p className="text-gray-500 text-center py-8">
                        Ask any question about the video content to get started!
                      </p>
                    ) : (
                      chatHistory.map((message, index) => (
                        <div
                          key={index}
                          className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                        >
                          <div
                            className={`max-w-[80%] px-4 py-2 rounded-lg ${
                              message.type === 'user'
                                ? 'bg-blue-500 text-white'
                                : 'bg-gray-100 text-gray-800'
                            }`}
                          >
                            {message.content}
                          </div>
                        </div>
                      ))
                    )}
                    {isAsking && (
                      <div className="flex justify-start">
                        <div className="bg-gray-100 px-4 py-2 rounded-lg flex items-center gap-2">
                          <Loader2 className="w-4 h-4 animate-spin" />
                          Thinking...
                        </div>
                      </div>
                    )}
                  </div>

                  {/* Question Input */}
                  <div className="flex gap-2">
                    <input
                      type="text"
                      value={question}
                      onChange={(e) => setQuestion(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && !isAsking && askQuestion()}
                      placeholder="Ask a question about this video..."
                      className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      disabled={isAsking}
                    />
                    <button
                      onClick={askQuestion}
                      disabled={isAsking || !question.trim()}
                      className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2 transition-colors"
                    >
                      <Send className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Footer */}
        <footer className="text-center mt-12 text-gray-600">
          <p>Powered by GroqAPI and LLaMA 3 â€¢ Built with React and Flask</p>
        </footer>
      </div>
    </div>
  );
}